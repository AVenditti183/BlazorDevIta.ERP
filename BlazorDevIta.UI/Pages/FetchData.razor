@page "/fetchdata"
@using BlazorDevIta.ERP.Shared
@using BlazorDevIta.UI.Shared
@inject IDataServices DataServices

<PageTitle>Weather forecast</PageTitle>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (currentForecast == null)
    {
        <Grid 
            GridItemType="WeatherForecastListItem" 
            Items="forecasts" 
            OnCreate="Create" OnEdit="Edit" OnDelete="Delete" />
    }
    else
    {
        <Details HeaderPropertyName="Summary" DetailsType="WeatherForecastDetails" 
            Item="currentForecast" OnCancel="Cancel" OnSave="Save">
            <Fields Context="weather">
                <TextBox Label="Summary" @bind-Value="weather!.Summary" />
                <DateBox Label="Date" @bind-Value="weather.Date" />
                <IntegerBox Label="Temperature C" @bind-Value="weather.TemperatureC" />
            </Fields>
        </Details>
    }

}

@code {
    private List<WeatherForecastListItem?>? forecasts = null;
    private WeatherForecastDetails? currentForecast = null;

    protected override async Task OnInitializedAsync()
        => await RefreshData();

    private async Task RefreshData()
        => forecasts = await DataServices.GetWeatherForecastsAsync();

    private void Create()
    {
        currentForecast = new WeatherForecastDetails();
    }

    private async Task Edit(WeatherForecastListItem forecast)
    {
        currentForecast = await DataServices.GetWeatherForecastByIdAsync(forecast.Id);
    }

    private async Task Save(WeatherForecastDetails forecast)
    {
        if(forecast.Id == 0)
        {
            await DataServices.Create(forecast);
        }
        else
        {
            await DataServices.Update(forecast);
        }
        await RefreshData();
        currentForecast = null;
    }


    private async Task Delete(WeatherForecastListItem forecast)
    {
        await DataServices.Delete(forecast.Id);
        await RefreshData();
    }

    private void Cancel()
    {
        currentForecast = null;
    }
}
