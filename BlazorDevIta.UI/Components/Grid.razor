@typeparam GridItemType where GridItemType: class

<h1>List Items</h1>

<button class="btn btn-primary" @onclick="OnCreate">
    Create Item
</button>

@if (Items?.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                @foreach (var property in properties)
                {
                    var display = property.GetCustomAttribute<DisplayAttribute>();
                    <th>@(display == null ? property.Name : display.Name)</th>
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                <tr>
                    @foreach (var property in properties)
                    {
                        var value = property.GetValue(item);
                        var displayFormat = property.GetCustomAttribute<DisplayFormatAttribute>();
                        <td>
                            @(displayFormat?.DataFormatString == null 
                                ? value 
                                : string.Format(displayFormat.DataFormatString, value))
                        </td>
                    }
                    <td>
                        <button class="btn btn-warning"
                        @onclick="@(() => OnEdit.InvokeAsync(item))">
                            Edit
                        </button>
                        <button class="btn btn-danger"
                        @onclick="@(() => OnDelete.InvokeAsync(item))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <span>No data available</span>
}

@code {
    private PropertyInfo[] properties = typeof(GridItemType).GetProperties()
        .Where(x => x.GetCustomAttribute<HiddenAttribute>() == null)
        .ToArray();

    [Parameter]
    public List<GridItemType>? Items { get; set; }

    [Parameter]
    public EventCallback OnCreate { get; set; }

    [Parameter]
    public EventCallback<GridItemType> OnEdit { get; set; }

    [Parameter]
    public EventCallback<GridItemType> OnDelete { get; set; }

}
